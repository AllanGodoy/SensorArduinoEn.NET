//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Payrol_Administration.Web.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SAI_CableEntities : DbContext
    {
        public SAI_CableEntities()
            : base("name=SAI_CableEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Almacene> Almacenes { get; set; }
        public virtual DbSet<Banco> Bancos { get; set; }
        public virtual DbSet<BarrioColonia> BarrioColonias { get; set; }
        public virtual DbSet<CajaCobro> CajaCobros { get; set; }
        public virtual DbSet<CallAve> CallAves { get; set; }
        public virtual DbSet<CallAvePa> CallAvePas { get; set; }
        public virtual DbSet<Cobradore> Cobradores { get; set; }
        public virtual DbSet<Cobro> Cobros { get; set; }
        public virtual DbSet<CobrosDet> CobrosDets { get; set; }
        public virtual DbSet<Configuracion> Configuracions { get; set; }
        public virtual DbSet<ContratoDet> ContratoDets { get; set; }
        public virtual DbSet<Contrato> Contratos { get; set; }
        public virtual DbSet<Departamento> Departamentos { get; set; }
        public virtual DbSet<Estado> Estados { get; set; }
        public virtual DbSet<Factura> Facturas { get; set; }
        public virtual DbSet<Linea> Lineas { get; set; }
        public virtual DbSet<Municipio> Municipios { get; set; }
        public virtual DbSet<Nodo> Nodos { get; set; }
        public virtual DbSet<Oficina> Oficinas { get; set; }
        public virtual DbSet<Pai> Pais { get; set; }
        public virtual DbSet<Poste> Postes { get; set; }
        public virtual DbSet<Producto> Productos { get; set; }
        public virtual DbSet<Servicio> Servicios { get; set; }
        public virtual DbSet<Solucione> Soluciones { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tarifa> Tarifas { get; set; }
        public virtual DbSet<TelefonoTipo> TelefonoTipoes { get; set; }
        public virtual DbSet<TipoCobro> TipoCobros { get; set; }
        public virtual DbSet<TipoMovimiento> TipoMovimientos { get; set; }
        public virtual DbSet<Vendedore> Vendedores { get; set; }
        public virtual DbSet<OrdenesTrabajoDet> OrdenesTrabajoDets { get; set; }
        public virtual DbSet<Tecnico> Tecnicos { get; set; }
        public virtual DbSet<Estatu> Estatus { get; set; }
        public virtual DbSet<OrdenesTrabajo> OrdenesTrabajoes { get; set; }
        public virtual DbSet<Falla> Fallas { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<DetMateriale> DetMateriales { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<Unidad> Unidads { get; set; }
    
        public virtual int agregarmaterial(Nullable<int> ordenID, Nullable<int> material, Nullable<int> cantidad, string observacion)
        {
            var ordenIDParameter = ordenID.HasValue ?
                new ObjectParameter("OrdenID", ordenID) :
                new ObjectParameter("OrdenID", typeof(int));
    
            var materialParameter = material.HasValue ?
                new ObjectParameter("Material", material) :
                new ObjectParameter("Material", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarmaterial", ordenIDParameter, materialParameter, cantidadParameter, observacionParameter);
        }
    
        public virtual int cambiacoordenadas(Nullable<int> clienteID, string latitude, string longitude)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("clienteID", clienteID) :
                new ObjectParameter("clienteID", typeof(int));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cambiacoordenadas", clienteIDParameter, latitudeParameter, longitudeParameter);
        }
    
        public virtual int ModificaOrden(Nullable<int> ordenID, Nullable<int> estatusID, string descripcionSolucion)
        {
            var ordenIDParameter = ordenID.HasValue ?
                new ObjectParameter("OrdenID", ordenID) :
                new ObjectParameter("OrdenID", typeof(int));
    
            var estatusIDParameter = estatusID.HasValue ?
                new ObjectParameter("EstatusID", estatusID) :
                new ObjectParameter("EstatusID", typeof(int));
    
            var descripcionSolucionParameter = descripcionSolucion != null ?
                new ObjectParameter("DescripcionSolucion", descripcionSolucion) :
                new ObjectParameter("DescripcionSolucion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModificaOrden", ordenIDParameter, estatusIDParameter, descripcionSolucionParameter);
        }
    
        public virtual int EliminarOrdenDet(Nullable<int> ordenID)
        {
            var ordenIDParameter = ordenID.HasValue ?
                new ObjectParameter("OrdenID", ordenID) :
                new ObjectParameter("OrdenID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarOrdenDet", ordenIDParameter);
        }
    }
}
